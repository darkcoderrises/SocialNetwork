(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '0=9'"
p3
sS'layer'
p4
S'/home/harshil/web2py/applications/SocialNetwork/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    auth.settings.login_next=URL(\'home\')\n    return dict(form=auth())\n\n\n@auth.requires_login()\ndef acceptreq():\n    id2 = request.args[0]\n    id1 = request.args[1]\n    db(db.freq.friend_id2==id2).delete()\n    db.friend.insert(friend_id1=id1,friend_id2=id2)\n\n@auth.requires_login()\ndef sendreq():\n    id1 = request.args[0]\n    id2 = request.args[1]\n    db(db.freq.friend_id1==id1 and db.freq.friend_id2==id2).delete()\n    db.freq.insert(friend_id1=id1,friend_id2=id2)\n\n@auth.requires_login()\ndef delfriend():\n    id1 = request.args[0]\n    id2 = request.args[1]\n    db(db.friend.friend_id1==id1 and db.friend.friend_id2==id2).delete()\n    db(db.friend.friend_id1==id2 and db.friend.friend_id2==id1).delete()\n    redirect(URL(\'home\',args=(int(auth.user.id))))\n\n@auth.requires_login()\ndef home():\n \n    flass=-1\n    logname = auth.user.first_name\n    people={}\n    logid = int(auth.user.id)   \n    k=-1\n    l=logid\n    if len(request.args)==0 or len(request.args)>1:\n        redirect(URL(\'home\',args=(logid)))\n    \n    elif len(request.args) == 1:\n        name = request.args[0]\n        for row in db().select(db.auth_user.ALL):\n            people[int(row.id)]=row.first_name+" "+row.last_name\n            if int(row.id) == int(name):\n                l= row.id\n                k = row.first_name\n\n    m=-1\n    if(k==logname):\n        m=1  \n\n    flist=[]\n    frlist=[]\n\n    for row in db().select(db.freq.ALL):\n        if int(row.friend_id1) == logid:\n            if l == int(row.friend_id2):\n                flass=0\n            flist.append(int(row.friend_id2))\n\n    for row in db().select(db.friend.ALL):\n        id1 = int(row.friend_id1)\n        id2 = int(row.friend_id2)\n\n        if id1 == logid:\n            if id2 == l:\n                flass=1\n            frlist.append(id2)\n        elif id2 == logid:\n            if id1 == l:\n                flass=1\n            frlist.append(id1)\n\n    import os\n    form = SQLFORM.factory(Field(\'description\',\'string\'),\n            Field(\'image\', \'upload\', requires=IS_IMAGE(),uploadfolder=os.path.join(request.folder,\'uploads\') ) \n            )\n    if form.process(formname=\'form\').accepted:\n        stream = open(request.folder+\'uploads/\'+form.vars.image, \'rb\')\n        db.post.insert(person_id=logid,description=form.vars.description,image=stream)\n\n    post=[]\n    for row in db().select(db.post.ALL, orderby=~db.post.id):\n        pid=row.person_id\n        des=row.description\n        img=row.image\n        post.append((pid,des,img))\n\n    search = SQLFORM.factory(Field(\'Search\',\'string\'))\n    if search.process(formname=\'search\').accepted:\n        name = search.vars.Search\n        resultn=[]\n        resulti=[]\n        for row in db(db.auth_user.first_name.contains(name,case_sensitive=False)).select():\n            resultn.append(row.first_name)\n            resulti.append(row.id)\n        redirect(URL(\'search\',args=(resultn,resulti)))\n\n    return dict(search=search,logid=logid,people=people,flass=flass,l=l,m=m,data="Welcome %(first_name)s" % auth.user, name=k , flist=flist , frlist=frlist,form = form, post=post)\n\ndef post():\n    rows=db(db.post.id==request.args[0]).select()\n    if len(rows)!=1:\n        return dict(error=1)\n    row=rows[0]\n    pid=row.person_id\n    des=row.description\n    img=row.image\n    post=(pid,des,img)\n\n    return dict(error=0,post=post)\n\n@auth.requires_login()\ndef search():\n    people= request.args[0].split(\'_\')\n    str_list = filter(None, people) \n    ids = request.args[1].split(\'_\')\n    str_lists = filter(None, ids) \n    return dict(people=str_list,ids=str_lists)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(post)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/harshil/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/harshil/web2py/applications/SocialNetwork/controllers/default.py", line 188, in <module>\n  File "/home/harshil/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/harshil/web2py/applications/SocialNetwork/controllers/default.py", line 120, in post\n    rows=db(db.post.id==request.args[0]).select()\n  File "/home/harshil/web2py/gluon/dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/harshil/web2py/gluon/dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/harshil/web2py/gluon/dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/harshil/web2py/gluon/dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/harshil/web2py/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/home/harshil/web2py/gluon/dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "/home/harshil/web2py/gluon/dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "/home/harshil/web2py/gluon/dal.py", line 2005, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'0=9\'\n'
p11
s.